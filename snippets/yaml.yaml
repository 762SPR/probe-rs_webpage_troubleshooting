---
# The name of the chip family.
name: string
# A list of all the chips in the family.
variants:
  # The name of the chip.
  - name: string
    # A list of all the available memories and their properties.
    memory_map:
      # The type of the memory. Possible are [Ram, Flash].
      # There needs to be at least one of each present.
      - Ram:
          range:
            # The start address of the memory (inclusive).
            start: number
            # The end address of the memory (inclusive).
            end: number
          # Marks the memory as the memory which the chip boots from.
          is_boot_memory: boolean
    # A list of all the used flash algorithms.
    flash_algorithms:
      # The name of the flash algorithm.
      - string
# A hashmap of all the available flash algorithms.
flash_algorithms:
  # The name of the flash algorithm.
  name:
    # The name of the flash algorithm.
    name: string
    # A description of the flash algorithm.
    description: string
    # Marks the algorithm to be used as the default algorithm.
    default: boolean
    # A base 64 encoded ELF binary blob containing
    # all the loadable symbols of the flash algorithm.
    instructions: base64string                          
    # The position independent address of the init routine.
    pc_init: number
    # The position independent address of the uninit routine.
    pc_uninit: number
    # The position independent address of the program page routine.
    pc_program_page: number
    # The position independent address of the erase sector routine.
    pc_erase_sector: number
    # The position independent address of the erase all routine.
    pc_erase_all: number
    # The offset where the data section of the ELF binary starts.
    data_section_offset: number
    flash_properties:
      # The address range for which this flash algorithm is to be used.
      address_range:
        # The start address (inclusive).
        start: number
        # The start address (inclusive).
        end: number
      # The programmable block size. This is the unit size that can be written to flash.
      page_size: number
      # The erased value of a byte in flash.
      erased_byte_value: number
      # How long a page program procedure can take.
      program_page_timeout: number
      # How long a sector erase procedure can take.
      erase_sector_timeout: number
      # The sectors this piece of flash consists of. A sector is the eraseable unit.
      sectors:
        # The size of the sectors starting form the address below.
        - size: number
          # The address from on which the new sector size is applicable.
          address: number
# The core type. Currently valid are [M4, M3, M33, M0, RISCV]
core: string